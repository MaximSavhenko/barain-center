generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topics   Topic[]
  notes    Note[]
  tags     Tag[]
  settings UserSetting?

  @@map("users")
}

model Topic {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  checklist ChecklistItem[]
  notes     Note[]

  @@map("topics")
}

model ChecklistItem {
  id    Int     @id @default(autoincrement())
  title String
  done  Boolean @default(false)
  order Int?

  topic   Topic @relation(fields: [topicId], references: [id])
  topicId Int

  @@map("checklist_items")
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  topic   Topic? @relation(fields: [topicId], references: [id])
  topicId Int?

  tags NoteTag[]

  @@map("notes")
}

model Tag {
  id    Int     @id @default(autoincrement())
  name  String
  color String?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  notes NoteTag[]

  @@map("tags")
}

model NoteTag {
  noteId Int
  tagId  Int

  note Note @relation(fields: [noteId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@id([noteId, tagId])
  @@map("note_tags")
}

model UserSetting {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  darkMode       Boolean @default(false)
  language       String  @default("ru")
  showDeadTopics Boolean @default(true)

  @@map("user_settings")
}
